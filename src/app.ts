import express from "express";
import cron from "node-cron";

import healthCheckRoutes from "./routes/healthCheckRoutes";
import mainRoutes from "./routes/mainRoutes";
import { errorHandler, requestLogger } from "./middleware/errorHandler";
import logger from "./utils/logger";
import { getEarningsCalendar } from "./services/stockService";
import { mainFlow } from "./controllers/mainController";
import { readFile, saveFile } from "./utils/file";

const app = express();

const RETENTION_DAYS = 7; // ◊©◊û◊ô◊®◊î ◊®◊ß ◊ú◊©◊ë◊ï◊¢

const runMainFlow = async () => {
  logger.info("üîÑ Running scheduled earnings check...");
  
  const todayStr = new Date().toISOString().slice(0, 10);
  logger.info(`üìÖ Checking earnings for: ${todayStr}`);

  // üîπ ◊©◊ú◊ï◊£ ◊®◊ß ◊ê◊™ ◊ì◊ï◊ó◊ï◊™ ◊î◊ô◊ï◊ù
  const companiesReportingToday = await getEarningsCalendar(todayStr, todayStr);

  if (!companiesReportingToday || companiesReportingToday.length === 0) {
    logger.info(`üì≠ No earnings reports scheduled for ${todayStr}`);
    return;
  }

  logger.info(`üìä Total companies on calendar: ${companiesReportingToday.length}`);

  // üîπ ◊°◊†◊ü ◊®◊ß ◊û◊†◊ô◊ï◊™ ◊©◊õ◊ë◊® ◊ì◊ô◊ï◊ï◊ó◊ï (epsActual !== null)
  const actuallyReported = companiesReportingToday.filter(
    (company: any) => 
      company.epsActual !== null && 
      company.revenueActual !== null
  );

  logger.info(`‚úÖ Already reported: ${actuallyReported.length}`);
  logger.info(`‚è≥ Still pending: ${companiesReportingToday.length - actuallyReported.length}`);

  if (actuallyReported.length === 0) {
    logger.info(`‚è≥ No completed reports yet for ${todayStr}. Will check again in 30 minutes.`);
    return;
  }

  // üîπ ◊ò◊¢◊ü tracking
  const allProcessedReports = readFile("previouslySentReports.json") as any;
  
  // üÜï ◊î◊ì◊§◊°◊™ ◊õ◊ú ◊î◊û◊†◊ô◊ï◊™ ◊©◊ß◊ô◊ô◊û◊ï◊™ ◊ë-JSON ◊ú◊§◊†◊ô ◊î◊†◊ô◊ß◊ï◊ô
  logger.info(`\n${"=".repeat(60)}`);
  logger.info(`üìã CURRENT HISTORY IN JSON (Before Cleanup)`);
  logger.info(`${"=".repeat(60)}`);
  
  const datesBeforeCleanup = Object.keys(allProcessedReports).sort().reverse();
  let totalSymbolsBeforeCleanup = 0;
  
  if (datesBeforeCleanup.length === 0) {
    logger.info(`   üì≠ Empty - No history yet`);
  } else {
    for (const date of datesBeforeCleanup) {
      const symbols = allProcessedReports[date];
      const symbolsList = Object.keys(symbols);
      totalSymbolsBeforeCleanup += symbolsList.length;
      
      logger.info(`\n   üìÖ ${date} (${symbolsList.length} symbols):`);
      logger.info(`      ${symbolsList.join(', ')}`);
    }
  }
  
  logger.info(`\n   üìä Total: ${datesBeforeCleanup.length} dates, ${totalSymbolsBeforeCleanup} symbols`);
  logger.info(`${"=".repeat(60)}\n`);
  
  // üîπ ◊†◊ô◊ß◊ï◊ô: ◊©◊û◊ï◊® ◊®◊ß 7 ◊ô◊û◊ô◊ù ◊ê◊ó◊®◊ï◊†◊ô◊ù
  const cutoffDate = new Date();
  cutoffDate.setDate(cutoffDate.getDate() - RETENTION_DAYS);
  const cutoffStr = cutoffDate.toISOString().slice(0, 10);
  
  const cleanedTracking: any = {};
  let deletedDates = 0;
  let deletedSymbolsCount = 0;
  
  logger.info(`üßπ Starting cleanup process...`);
  logger.info(`   Cutoff date: ${cutoffStr} (keeping ${RETENTION_DAYS} days)`);
  
  for (const [date, symbols] of Object.entries(allProcessedReports)) {
    if (date >= cutoffStr) {
      cleanedTracking[date] = symbols;
      logger.info(`   ‚úÖ Keeping: ${date} (${Object.keys(symbols as any).length} symbols)`);
    } else {
      deletedDates++;
      const symbolsCount = Object.keys(symbols as any).length;
      deletedSymbolsCount += symbolsCount;
      logger.info(`   üóëÔ∏è  Deleting: ${date} (${symbolsCount} symbols) - older than ${RETENTION_DAYS} days`);
    }
  }
  
  if (deletedDates > 0) {
    logger.info(`\n‚ôªÔ∏è  Cleanup Summary: Deleted ${deletedDates} dates with ${deletedSymbolsCount} symbols\n`);
  } else {
    logger.info(`\n‚ú® No old data to clean\n`);
  }
  
  // üîπ ◊ê◊™◊ó◊ú ◊î◊ô◊ï◊ù ◊ê◊ù ◊¶◊®◊ô◊ö
  if (!cleanedTracking[todayStr]) {
    cleanedTracking[todayStr] = {};
    logger.info(`üìù Initialized new date: ${todayStr}`);
  }

  // üÜï ◊î◊ì◊§◊°◊™ ◊î◊û◊¶◊ë ◊ê◊ó◊®◊ô ◊î◊†◊ô◊ß◊ï◊ô
  logger.info(`\n${"=".repeat(60)}`);
  logger.info(`üìã HISTORY AFTER CLEANUP`);
  logger.info(`${"=".repeat(60)}`);
  
  const datesAfterCleanup = Object.keys(cleanedTracking).sort().reverse();
  let totalSymbolsAfterCleanup = 0;
  
  for (const date of datesAfterCleanup) {
    const symbols = cleanedTracking[date];
    const symbolsList = Object.keys(symbols);
    totalSymbolsAfterCleanup += symbolsList.length;
    
    logger.info(`\n   üìÖ ${date} (${symbolsList.length} symbols):`);
    if (symbolsList.length > 0) {
      logger.info(`      ${symbolsList.join(', ')}`);
    } else {
      logger.info(`      (empty - today's reports will be added here)`);
    }
  }
  
  logger.info(`\n   üìä Total: ${datesAfterCleanup.length} dates, ${totalSymbolsAfterCleanup} symbols`);
  logger.info(`${"=".repeat(60)}\n`);

  // üîπ ◊¢◊ë◊ì ◊õ◊ú ◊ì◊ï◊ó ◊ó◊ì◊©
  let processedCount = 0;
  let skippedCount = 0;
  let errorCount = 0;

  logger.info(`üîç Starting to process ${actuallyReported.length} reported companies...\n`);

  for (const company of actuallyReported) {
    const symbol: string = company.symbol;

    try {
      // ◊ë◊ì◊ï◊ß ◊ê◊ù ◊õ◊ë◊® ◊¢◊ô◊ë◊ì◊†◊ï ◊ê◊™ ◊î◊û◊†◊ô◊î ◊î◊ñ◊ï (◊ë◊õ◊ú ◊î◊™◊ê◊®◊ô◊õ◊ô◊ù ◊©◊ú ◊î-7 ◊ô◊û◊ô◊ù!)
      let alreadyProcessed = false;
      let processedDate = null;
      
      for (const [date, symbols] of Object.entries(cleanedTracking)) {
        if ((symbols as any)[symbol]) {
          processedDate = date;
          alreadyProcessed = true;
          break;
        }
      }
      
      if (alreadyProcessed) {
        skippedCount++;
        logger.info(`‚è≠Ô∏è  [${skippedCount}/${actuallyReported.length}] Skipping ${symbol} - already processed on ${processedDate}`);
        continue;
      }

      logger.info(`\n${"‚îÄ".repeat(60)}`);
      logger.info(`üîç [${processedCount + skippedCount + errorCount + 1}/${actuallyReported.length}] Processing ${symbol}...`);
      logger.info(`   üìä Company: ${symbol}`);
      logger.info(`   üí∞ EPS: ${company.epsActual} vs ${company.epsEstimated} (${company.epsActual && company.epsEstimated ? ((company.epsActual - company.epsEstimated) / company.epsEstimated * 100).toFixed(1) + '%' : 'N/A'})`);
      logger.info(`   üíµ Revenue: $${(company.revenueActual / 1_000_000).toFixed(0)}M vs $${(company.revenueEstimated / 1_000_000).toFixed(0)}M`);
      logger.info(`   ‚è∞ Time: ${company.time?.toUpperCase() || 'Unknown'}`);

      // üîπ ◊î◊®◊• ◊†◊ô◊™◊ï◊ó ◊û◊ú◊ê
      await mainFlow(symbol);

      // üîπ ◊°◊û◊ü ◊õ◊û◊¢◊ï◊ë◊ì
      cleanedTracking[todayStr][symbol] = {
        processed: true,
        timestamp: new Date().toISOString(),
        epsActual: company.epsActual,
        epsEstimated: company.epsEstimated,
        revenueActual: company.revenueActual,
        revenueEstimated: company.revenueEstimated,
        reportTime: company.time
      };

      // üîπ ◊©◊û◊ï◊® ◊û◊ô◊ì (◊ú◊û◊ß◊®◊î ◊©◊ú crash)
      saveFile("previouslySentReports.json", cleanedTracking);
      
      processedCount++;
      logger.info(`‚úÖ ${symbol} processed and saved successfully`);
      logger.info(`${"‚îÄ".repeat(60)}`);

    } catch (error: any) {
      errorCount++;
      logger.error(`\n‚ùå [${processedCount + skippedCount + errorCount}/${actuallyReported.length}] Error processing ${symbol}:`);
      logger.error(`   Error: ${error.message}`);
      logger.error(`   Stack: ${error.stack}`);
      
      // ◊°◊û◊ü ◊õ◊©◊í◊ô◊ê◊î (◊õ◊ì◊ô ◊©◊ú◊ê ◊†◊†◊°◊î ◊©◊ï◊ë ◊ï◊©◊ï◊ë)
      cleanedTracking[todayStr][symbol] = {
        processed: false,
        error: error.message,
        timestamp: new Date().toISOString()
      };
      saveFile("previouslySentReports.json", cleanedTracking);
    }
  }

  // üÜï ◊î◊ì◊§◊°◊™ ◊î◊û◊¶◊ë ◊î◊°◊ï◊§◊ô
  logger.info(`\n${"=".repeat(60)}`);
  logger.info(`üìã FINAL STATE IN JSON (After Processing)`);
  logger.info(`${"=".repeat(60)}`);
  
  const finalDates = Object.keys(cleanedTracking).sort().reverse();
  let finalTotalSymbols = 0;
  
  for (const date of finalDates) {
    const symbols = cleanedTracking[date];
    const symbolsList = Object.keys(symbols);
    finalTotalSymbols += symbolsList.length;
    
    logger.info(`\n   üìÖ ${date} (${symbolsList.length} symbols):`);
    logger.info(`      ${symbolsList.join(', ')}`);
  }
  
  logger.info(`\n   üìä Total: ${finalDates.length} dates, ${finalTotalSymbols} symbols`);
  logger.info(`${"=".repeat(60)}\n`);

  // üîπ ◊°◊ô◊õ◊ï◊ù ◊°◊ï◊§◊ô
  logger.info(`\n${"‚ïê".repeat(60)}`);
  logger.info(`‚úÖ EARNINGS CHECK COMPLETED FOR ${todayStr}`);
  logger.info(`${"‚ïê".repeat(60)}`);
  logger.info(`   ‚úÖ Successfully Processed: ${processedCount}`);
  logger.info(`   ‚è≠Ô∏è  Skipped (already done): ${skippedCount}`);
  logger.info(`   ‚ùå Errors: ${errorCount}`);
  logger.info(`   üìä Total Handled: ${processedCount + skippedCount + errorCount}/${actuallyReported.length}`);
  logger.info(`${"‚ïê".repeat(60)}\n`);
};

// üîπ ◊î◊®◊¶◊î ◊û◊ô◊ô◊ì◊ô◊™ ◊ë◊î◊§◊¢◊ú◊î (◊ê◊ï◊§◊¶◊ô◊ï◊†◊ú◊ô - ◊ú◊î◊°◊®◊™ ◊î◊î◊¢◊®◊î ◊ú◊ë◊ì◊ô◊ß◊î)
// runMainFlow();

// üîπ Schedule: ◊õ◊ú 30 ◊ì◊ß◊ï◊™
cron.schedule("*/30 * * * *", async () => {
  await runMainFlow();
});

// üîπ Schedule: ◊ë◊ñ◊û◊†◊ô◊ù ◊ß◊®◊ô◊ò◊ô◊ô◊ù
// cron.schedule("0 9 * * *", async () => {
//   logger.info("\n‚è∞ === SCHEDULED CHECK: 9:00 AM (BMO Reports) ===\n");
//   await runMainFlow();
// });

// cron.schedule("0 18 * * *", async () => {
//   logger.info("\n‚è∞ === SCHEDULED CHECK: 6:00 PM (AMC Reports) ===\n");
//   await runMainFlow();
// });

// cron.schedule("0 21 * * *", async () => {
//   logger.info("\n‚è∞ === SCHEDULED CHECK: 9:00 PM (Final Check) ===\n");
//   await runMainFlow();
// });

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(requestLogger);
app.use("/api/healthCheck", healthCheckRoutes);
app.use("/api/main", mainRoutes);
app.use(errorHandler);

export default app;